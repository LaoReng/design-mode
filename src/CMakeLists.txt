cmake_minimum_required(VERSION 3.27)
project(design-mode)

add_compile_options("/source-charset:utf-8")

option(SIMPLE_FACTORY_PATTERN "简单工厂模式" ON)
option(STRATEGY "策略模式" ON)
option(DECORATOR "装饰模式" ON)
option(PROXY "代理模式" ON)
option(FACTORY_METHOD "工厂方法模式" ON)
option(PROTOTYPE "原型模式" ON)
option(TEMPLATE_METHOD "模板方法模式" ON)
option(FACADE "外观模式" ON)
option(BUILDER "建造者模式" ON)
option(OBSERVER "观察者/发布者-订阅者模式" ON)

set(BUILD_TYPE "Debug" CACHE STRING "构建类型")

set(CMAKE_BUILD_TYPE ${BUILD_TYPE})

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# 如果当前是DEBUG则生成可执行程序，RELEASE则生成库文件
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_executable(
        ${PROJECT_NAME}
        ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp
    )
else()
    add_library(${PROJECT_NAME} STATIC)
endif()

if(SIMPLE_FACTORY_PATTERN)
    add_definitions(-DSIMPLE_FACTORY_PATTERN)
    add_subdirectory(SimpleFactoryPattern)
endif()
if(STRATEGY)
    add_definitions(-DSTRATEGY)
    add_subdirectory(Strategy)
endif()
if(DECORATOR)
    add_definitions(-DDECORATOR)
    add_subdirectory(Decorator)
endif()
if(PROXY)
    add_definitions(-DPROXY)
    add_subdirectory(Proxy)
endif()
if(FACTORY_METHOD)
    add_definitions(-DFACTORY_METHOD)
    add_subdirectory(FactoryMethod)
endif()
if(PROTOTYPE)
    add_definitions(-DPROTOTYPE)
    add_subdirectory(Prototype)
endif()
if(TEMPLATE_METHOD)
    add_definitions(-DTEMPLATE_METHOD)
    add_subdirectory(TemplateMethod)
endif()
if(FACADE)
    add_definitions(-DFACADE)
    add_subdirectory(Facade)
endif()
if(BUILDER)
    add_definitions(-DBUILDER)
    add_subdirectory(Builder)
endif()
if(OBSERVER)
    add_definitions(-DOBSERVER)
    add_subdirectory(Observer)
endif()